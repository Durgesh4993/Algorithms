#include <iostream>
#include <stack>

// Definition for a binary tree node.
struct TreeNode {
  int val;
  TreeNode *left;
  TreeNode *right;
  TreeNode() : val(0), left(nullptr), right(nullptr) {}
  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
  TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

// Definition for a binary search tree node.
struct BSTNode {
  int val;
  BSTNode *left;
  BSTNode *right;
  BSTNode() : val(0), left(nullptr), right(nullptr) {}
  BSTNode(int x) : val(x), left(nullptr), right(nullptr) {}
  BSTNode(int x, BSTNode *left, BSTNode *right) : val(x), left(left), right(right) {}
};

BSTNode* convertToBST(TreeNode* root) {
  if (root == nullptr) {
    return nullptr;
  }

  std::stack<TreeNode*> s;
  BSTNode* bstRoot = nullptr;
  BSTNode* bstCurr = nullptr;

  TreeNode* curr = root;
  while (curr != nullptr || !s.empty()) {
    while (curr != nullptr) {
      s.push(curr);
      curr = curr->left;
    }

    curr = s.top();
    s.pop();

    if (bstRoot == nullptr) {
      bstRoot = new BSTNode(curr->val);
      bstCurr = bstRoot;
    } else {
      bstCurr->right = new BSTNode(curr->val);
      bstCurr = bstCurr->right;
    }

    curr = curr->right;
  }

  return bstRoot;
}

int main() {
  TreeNode* root = new TreeNode(4, 
 new TreeNode(2, new TreeNode(1), new TreeNode(3)),
 new TreeNode(6, new TreeNode(5), new TreeNode(7)));

  BSTNode* bstRoot = convertToBST(root);
  return 0;
}
